- hosts: all
  # user: root
  become: yes
  become_method: su
  become_user: root

  tasks:

    # PREREQS
    
    - name: Upgrade all packages to the latest version
      apt: update_cache=yes upgrade=dist

    - name: Update APT package cache
      action: apt update_cache=yes

    - name: Install list of packages
      apt: name={{item}} state=installed
      with_items:
           - sudo
           - curl
           - vim
           - make
           - apt-transport-https
           - ca-certificates 
           - gnupg2
           - software-properties-common

    - name: Create a new user
      user: 
        name=k8s
        state=present
        groups="sudo,docker"
        shell=/bin/bash

    # DOCKER

    - name: Add Docker signing key, will not download if present
      apt_key:
        id: 0EBFCD88
        url: https://download.docker.com/linux/debian/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/debian stretch edge
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: present
        update_cache: yes

    - name: Create a docker group
      group: 
        name=k8s
        state=present


    # KUBERNETES
   
    # Don't know why it was giving me errors adding it manually, 
    # TODO convert to how docker does it similarly above (add through ansible not shell)
    - name: Add Kubernetes signing key
      shell: curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
    
    - name: Add Kubernetes repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
    
    - name: Install Kubernetes packages
      apt: name={{item}} state=installed update_cache=yes
      with_items:
           - kubectl
           - kubeadm
           - kubelet

    # SSH
    
    - name: Placing key
      authorized_key: user=k8s key="{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    
    - name: Make sure we have a 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Add sudoers users to wheel group
      user: name=k8s groups=wheel append=yes state=present createhome=yes

    - name: Disallow password authentication
      action: lineinfile dest=/etc/ssh/sshd_config regexp="^PasswordAuthentication" line="PasswordAuthentication no" state=present
      notify: restart ssh

    - name: Disallow root SSH access
      action: lineinfile dest=/etc/ssh/sshd_config regexp="^PermitRootLogin" line="PermitRootLogin no" state=present
      notify: restart ssh

  handlers:
    - name: restart networking
      service: name=networking state=restarted
    - name: restart ssh
      service: name=sshd state=restarted
